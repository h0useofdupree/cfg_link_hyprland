# Autogenerated config.py
#
config.load_autoconfig(True)


c.url.searchengines = {
    "DEFAULT": "https://duckduckgo.com/?q={}",
    "a": "https://wiki.archlinux.org/?search={}",
    "yt": "https://www.youtube.com/results?search_query={}",
    "rd": "https://www.reddit.com/search/?q={}",
    "gh": "https://github.com/search?q={}&type=repositories",
}

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "chrome-devtools://*")

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set("content.cookies.accept", "all", "devtools://*")

# Allow websites to share screen content.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
c.content.desktop_capture = True

# Allow websites to share screen content.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.desktop_capture", True, "https://teams.microsoft.com")

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set("content.headers.accept_language", "", "https://matchmaker.krunker.io/*")

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}",
    "https://web.whatsapp.com/",
)

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set(
    "content.headers.user_agent",
    "Mozilla/5.0 ({os_info}; rv:90.0) Gecko/20100101 Firefox/90.0",
    "https://accounts.google.com/*",
)

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "chrome-devtools://*")

# Load images automatically in web pages.
# Type: Bool
config.set("content.images", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome-devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "devtools://*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "chrome://*/*")

# Enable JavaScript.
# Type: Bool
config.set("content.javascript.enabled", True, "qute://*/*")

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set(
    "content.local_content_can_access_remote_urls",
    True,
    "file:///home/juuls/.local/share/qutebrowser/userscripts/*",
)

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set(
    "content.local_content_can_access_file_urls",
    False,
    "file:///home/juuls/.local/share/qutebrowser/userscripts/*",
)

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.media.audio_capture", True, "https://teams.microsoft.com")

# Allow websites to record audio and video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.media.audio_video_capture", True, "https://teams.microsoft.com")

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set("content.notifications.enabled", True, "https://teams.microsoft.com")


nord = {
    "base03": "#3b4252",
    "base02": "#434c5e",
    "base01": "#e5e9f0",
    "base00": "#d8dee9",
    "base0": "#4c566a",
    "base1": "#5e81ac",
    "base2": "#eee8d5",
    "base3": "#eceff4",
    "yellow": "#ebcb8b",
    "orange": "#ebcb8b",
    "red": "#bf616a",
    "magenta": "#b48ead",
    "violet": "#8fbcbb",
    "blue": "#5e81ac",
    "cyan": "#88c0d0",
    "green": "#a3be8c",
}

## Background color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.bg = nord["base03"]

## Bottom border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.bottom = nord["base03"]

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.category.border.top = nord["base03"]

## Foreground color of completion widget category headers.
## Type: QtColor
c.colors.completion.category.fg = nord["base3"]

## Background color of the completion widget for even rows.
## Type: QssColor
c.colors.completion.even.bg = nord["base02"]

## Text color of the completion widget.
## Type: QtColor
c.colors.completion.fg = nord["base3"]

## Background color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.bg = nord["violet"]

## Bottom border color of the selected completion item.
## Type: QssColor
c.colors.completion.item.selected.border.bottom = nord["violet"]

## Top border color of the completion widget category headers.
## Type: QssColor
c.colors.completion.item.selected.border.top = nord["violet"]

## Foreground color of the selected completion item.
## Type: QtColor
c.colors.completion.item.selected.fg = nord["base3"]

## Foreground color of the matched text in the completion.
## Type: QssColor
c.colors.completion.match.fg = nord["base2"]

## Background color of the completion widget for odd rows.
## Type: QssColor
c.colors.completion.odd.bg = nord["base02"]

## Color of the scrollbar in completion view
## Type: QssColor
c.colors.completion.scrollbar.bg = nord["base0"]

## Color of the scrollbar handle in completion view.
## Type: QssColor
c.colors.completion.scrollbar.fg = nord["base2"]

## Background color for the download bar.
## Type: QssColor
c.colors.downloads.bar.bg = nord["base03"]

## Background color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.bg = nord["red"]

## Foreground color for downloads with errors.
## Type: QtColor
c.colors.downloads.error.fg = nord["base3"]

## Color gradient start for download backgrounds.
## Type: QtColor
# c.colors.downloads.start.bg = '#0000aa'

## Color gradient start for download text.
## Type: QtColor
c.colors.downloads.start.fg = nord["base3"]

## Color gradient stop for download backgrounds.
## Type: QtColor
# c.colors.downloads.stop.bg = '#00aa00'

## Color gradient end for download text.
## Type: QtColor
# c.colors.downloads.stop.fg = nord['base3']

## Color gradient interpolation system for download backgrounds.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
# c.colors.downloads.system.bg = 'rgb'

## Color gradient interpolation system for download text.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
# c.colors.downloads.system.fg = 'rgb'

## Background color for hints. Note that you can use a `rgba(...)` value
## for transparency.
## Type: QssColor
c.colors.hints.bg = nord["violet"]

## Font color for hints.
## Type: QssColor
c.colors.hints.fg = nord["base3"]

## Font color for the matched part of hints.
## Type: QssColor
c.colors.hints.match.fg = nord["base2"]

## Background color of the keyhint widget.
## Type: QssColor
# c.colors.keyhint.bg = 'rgba(0, 0, 0, 80%)'

## Text color for the keyhint widget.
## Type: QssColor
c.colors.keyhint.fg = nord["base3"]

## Highlight color for keys to complete the current keychain.
## Type: QssColor
c.colors.keyhint.suffix.fg = nord["yellow"]

## Background color of an error message.
## Type: QssColor
c.colors.messages.error.bg = nord["red"]

## Border color of an error message.
## Type: QssColor
c.colors.messages.error.border = nord["red"]

## Foreground color of an error message.
## Type: QssColor
c.colors.messages.error.fg = nord["base3"]

## Background color of an info message.
## Type: QssColor
c.colors.messages.info.bg = nord["base03"]

## Border color of an info message.
## Type: QssColor
c.colors.messages.info.border = nord["base03"]

## Foreground color an info message.
## Type: QssColor
c.colors.messages.info.fg = nord["base3"]

## Background color of a warning message.
## Type: QssColor
c.colors.messages.warning.bg = nord["orange"]

## Border color of a warning message.
## Type: QssColor
c.colors.messages.warning.border = nord["orange"]

## Foreground color a warning message.
## Type: QssColor
c.colors.messages.warning.fg = nord["base3"]

## Background color for prompts.
## Type: QssColor
c.colors.prompts.bg = nord["base02"]

## Border used around UI elements in prompts.
## Type: String
c.colors.prompts.border = "1px solid " + nord["base3"]

## Foreground color for prompts.
## Type: QssColor
c.colors.prompts.fg = nord["base3"]

## Background color for the selected item in filename prompts.
## Type: QssColor
c.colors.prompts.selected.bg = nord["base01"]

## Background color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.bg = nord["blue"]

## Foreground color of the statusbar in caret mode.
## Type: QssColor
c.colors.statusbar.caret.fg = nord["base3"]

## Background color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.bg = nord["violet"]

## Foreground color of the statusbar in caret mode with a selection.
## Type: QssColor
c.colors.statusbar.caret.selection.fg = nord["base3"]

## Background color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.bg = nord["base03"]

## Foreground color of the statusbar in command mode.
## Type: QssColor
c.colors.statusbar.command.fg = nord["base3"]

## Background color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.bg = nord["base01"]

## Foreground color of the statusbar in private browsing + command mode.
## Type: QssColor
c.colors.statusbar.command.private.fg = nord["base3"]

## Background color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.bg = nord["green"]

## Foreground color of the statusbar in insert mode.
## Type: QssColor
c.colors.statusbar.insert.fg = nord["base3"]

## Background color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.bg = nord["base03"]

## Foreground color of the statusbar.
## Type: QssColor
c.colors.statusbar.normal.fg = nord["base3"]

## Background color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.bg = nord["magenta"]

## Foreground color of the statusbar in passthrough mode.
## Type: QssColor
c.colors.statusbar.passthrough.fg = nord["base3"]

## Background color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.bg = nord["base01"]

## Foreground color of the statusbar in private browsing mode.
## Type: QssColor
c.colors.statusbar.private.fg = nord["base3"]

## Background color of the progress bar.
## Type: QssColor
c.colors.statusbar.progress.bg = nord["base3"]

## Foreground color of the URL in the statusbar on error.
## Type: QssColor
c.colors.statusbar.url.error.fg = nord["red"]

## Default foreground color of the URL in the statusbar.
## Type: QssColor
c.colors.statusbar.url.fg = nord["base3"]

## Foreground color of the URL in the statusbar for hovered links.
## Type: QssColor
c.colors.statusbar.url.hover.fg = nord["base2"]

## Foreground color of the URL in the statusbar on successful load
## (http).
## Type: QssColor
c.colors.statusbar.url.success.http.fg = nord["base3"]

## Foreground color of the URL in the statusbar on successful load
## (https).
## Type: QssColor
c.colors.statusbar.url.success.https.fg = nord["base3"]

## Foreground color of the URL in the statusbar when there's a warning.
## Type: QssColor
c.colors.statusbar.url.warn.fg = nord["yellow"]

## Background color of the tab bar.
## Type: QtColor
# c.colors.tabs.bar.bg = '#555555'

## Background color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.bg = nord["base01"]

## Foreground color of unselected even tabs.
## Type: QtColor
c.colors.tabs.even.fg = nord["base2"]

## Color for the tab indicator on errors.
## Type: QtColor
c.colors.tabs.indicator.error = nord["red"]

## Color gradient start for the tab indicator.
## Type: QtColor
c.colors.tabs.indicator.start = nord["violet"]

## Color gradient end for the tab indicator.
## Type: QtColor
c.colors.tabs.indicator.stop = nord["orange"]

## Color gradient interpolation system for the tab indicator.
## Type: ColorSystem
## Valid values:
##   - rgb: Interpolate in the RGB color system.
##   - hsv: Interpolate in the HSV color system.
##   - hsl: Interpolate in the HSL color system.
##   - none: Don't show a gradient.
# c.colors.tabs.indicator.system = 'rgb'

## Background color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.bg = nord["base01"]

## Foreground color of unselected odd tabs.
## Type: QtColor
c.colors.tabs.odd.fg = nord["base2"]

## Background color of selected even tabs.
## Type: QtColor
c.colors.tabs.selected.even.bg = nord["base03"]

## Foreground color of selected even tabs.
## Type: QtColor
c.colors.tabs.selected.even.fg = nord["base3"]

## Background color of selected odd tabs.
## Type: QtColor
c.colors.tabs.selected.odd.bg = nord["base03"]

## Foreground color of selected odd tabs.
## Type: QtColor
c.colors.tabs.selected.odd.fg = nord["base3"]

## Background color for webpages if unset (or empty to use the theme's
## color)
## Type: QtColor
# c.colors.webpage.bg = 'white'
